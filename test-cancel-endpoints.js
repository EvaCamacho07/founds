// Test para encontrar el endpoint de cancelaci√≥n de suscripci√≥n
const baseURL = 'https://2707pya55l.execute-api.us-east-1.amazonaws.com/dev/api';

async function testCancelEndpoints() {
    console.log('üîç Probando endpoints de cancelaci√≥n...\n');
    
    try {
        // 1. Crear usuario
        console.log('1Ô∏è‚É£ Creando usuario...');
        const userPayload = {
            name: 'Usuario Cancelaci√≥n Test',
            email: 'cancel-test@btg.com',
            phone: '+573001122334'
        };
        
        const createUserResponse = await fetch(`${baseURL}/users`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userPayload)
        });
        
        const userData = await createUserResponse.json();
        const userId = userData.data.userId;
        console.log(`‚úÖ Usuario creado: ${userId}`);
        
        // 2. Suscribir a un fondo
        console.log('2Ô∏è‚É£ Suscribiendo a fondo...');
        const subscribeResponse = await fetch(`${baseURL}/transactions/subscribe`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId: userId,
                fundId: 1,
                amount: 75000  // Monto m√≠nimo requerido
            })
        });
        
        const subscriptionData = await subscribeResponse.json();
        console.log(`‚úÖ Suscripci√≥n creada: ${subscriptionData.subscription.subscriptionId}`);
        
        // 3. Probar diferentes endpoints de cancelaci√≥n
        const subscriptionId = subscriptionData.subscription.subscriptionId;
        console.log('3Ô∏è‚É£ Probando endpoints de cancelaci√≥n...');
        
        // Opci√≥n 1: DELETE /transactions/unsubscribe
        console.log('   Probando DELETE /transactions/unsubscribe...');
        try {
            const unsubResponse1 = await fetch(`${baseURL}/transactions/unsubscribe`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ subscriptionId: subscriptionId })
            });
            console.log(`     Status: ${unsubResponse1.status}`);
            if (unsubResponse1.status !== 404) {
                const result = await unsubResponse1.text();
                console.log(`     Response: ${result}`);
            }
        } catch (e) {
            console.log(`     Error: ${e.message}`);
        }
        
        // Opci√≥n 2: POST /transactions/unsubscribe
        console.log('   Probando POST /transactions/unsubscribe...');
        try {
            const unsubResponse2 = await fetch(`${baseURL}/transactions/unsubscribe`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ subscriptionId: subscriptionId })
            });
            console.log(`     Status: ${unsubResponse2.status}`);
            if (unsubResponse2.status !== 404) {
                const result = await unsubResponse2.text();
                console.log(`     Response: ${result}`);
            }
        } catch (e) {
            console.log(`     Error: ${e.message}`);
        }
        
        // Opci√≥n 3: DELETE /subscriptions/{id}
        console.log('   Probando DELETE /subscriptions/{id}...');
        try {
            const unsubResponse3 = await fetch(`${baseURL}/subscriptions/${subscriptionId}`, {
                method: 'DELETE'
            });
            console.log(`     Status: ${unsubResponse3.status}`);
            if (unsubResponse3.status !== 404) {
                const result = await unsubResponse3.text();
                console.log(`     Response: ${result}`);
            }
        } catch (e) {
            console.log(`     Error: ${e.message}`);
        }
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
    
    console.log('\n‚úÖ Pruebas de cancelaci√≥n completadas');
}

testCancelEndpoints();
