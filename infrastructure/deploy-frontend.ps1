# Frontend Deployment Script for BTG Pactual Pension Fund Management System
# This script builds and deploys the React frontend to AWS S3 + CloudFront

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("dev", "staging", "prod")]
    [string]$Environment = "dev",
    
    [Parameter(Mandatory=$false)]
    [string]$Region = "us-east-1",
    
    [Parameter(Mandatory=$false)]
    [string]$TablePrefix = "btg-pension",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipBuild = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipCacheInvalidation = $false
)

$ErrorActionPreference = "Stop"

Write-Host "üåê BTG Pactual - Frontend Deployment" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host "Environment: $Environment" -ForegroundColor Yellow
Write-Host "Region: $Region" -ForegroundColor Yellow
Write-Host "Table Prefix: $TablePrefix" -ForegroundColor Yellow
Write-Host ""

# Function to write colored output
function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  [INFO] $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ [SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  [WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå [ERROR] $Message" -ForegroundColor Red
}

function Write-Step {
    param([string]$Step, [string]$Message)
    Write-Host "üîÑ [$Step] $Message" -ForegroundColor Magenta
}

try {
    # Step 1: Verify Prerequisites
    Write-Step "1/6" "Verificando prerequisitos..."
    
    # Check if in correct directory
    if (-not (Test-Path "../frontend/package.json")) {
        throw "Error: No se encuentra el archivo frontend/package.json. Ejecute este script desde el directorio infrastructure/"
    }
    
    # Check Node.js and npm
    try {
        $nodeVersion = node --version 2>$null
        $npmVersion = npm --version 2>$null
        if ($LASTEXITCODE -ne 0) { throw "Node.js no encontrado" }
        Write-Info "Node.js: $nodeVersion, npm: $npmVersion"
    } catch {
        throw "Node.js/npm no est√°n instalados. Por favor instale Node.js 18 o superior."
    }
    
    # Check AWS CLI
    try {
        $awsVersion = aws --version 2>$null
        if ($LASTEXITCODE -ne 0) { throw "AWS CLI no encontrado" }
        Write-Info "AWS CLI: $awsVersion"
    } catch {
        throw "AWS CLI no est√° instalado. Por favor instale AWS CLI y configure sus credenciales."
    }
    
    # Check AWS credentials
    try {
        $identity = aws sts get-caller-identity --output json 2>$null | ConvertFrom-Json
        if ($LASTEXITCODE -ne 0) { throw "Credenciales no v√°lidas" }
        Write-Info "Credenciales AWS v√°lidas para: $($identity.Arn)"
    } catch {
        throw "Credenciales AWS no configuradas. Ejecute 'aws configure'."
    }
    
    Write-Success "Prerequisitos verificados"

    # Step 2: Get Stack Information
    Write-Step "2/6" "Obteniendo informaci√≥n del stack..."
    
    $stackName = "btg-pension-$Environment"
    
    # Get stack outputs
    try {
        $stackOutputs = aws cloudformation describe-stacks `
            --stack-name $stackName `
            --region $Region `
            --query 'Stacks[0].Outputs' `
            --output json 2>$null | ConvertFrom-Json
        
        if ($LASTEXITCODE -ne 0) { throw "Stack no encontrado" }
        Write-Info "Stack encontrado: $stackName"
    } catch {
        throw "Stack '$stackName' no existe. Ejecute primero el despliegue de infraestructura con CloudFormation."
    }
    
    # Extract important outputs
    $s3BucketName = ($stackOutputs | Where-Object { $_.OutputKey -eq "FrontendBucketName" }).OutputValue
    $apiGatewayUrl = ($stackOutputs | Where-Object { $_.OutputKey -eq "ApiGatewayUrl" }).OutputValue
    $cloudFrontDomain = ($stackOutputs | Where-Object { $_.OutputKey -eq "FrontendURL" }).OutputValue
    
    if (-not $s3BucketName) { throw "No se pudo obtener el nombre del bucket S3 del stack" }
    if (-not $apiGatewayUrl) { throw "No se pudo obtener la URL del API Gateway del stack" }
    
    Write-Info "S3 Bucket: $s3BucketName"
    Write-Info "API Gateway: $apiGatewayUrl"
    if ($cloudFrontDomain) { Write-Info "CloudFront: $cloudFrontDomain" }
    
    Write-Success "Informaci√≥n del stack obtenida"

    # Step 3: Configure Frontend Environment
    Write-Step "3/6" "Configurando variables de entorno del frontend..."
    
    Set-Location "../frontend"
    
    # Create .env file for build process
    $envContent = @"
# Frontend Environment Configuration - Generated by deployment script
REACT_APP_API_URL=$apiGatewayUrl
REACT_APP_ENVIRONMENT=$Environment
REACT_APP_VERSION=$(Get-Date -Format 'yyyy.MM.dd.HHmm')
REACT_APP_BUILD_TIME=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

# Feature flags
REACT_APP_ENABLE_NOTIFICATIONS=true
REACT_APP_ENABLE_SMS=false
REACT_APP_ENABLE_EMAIL=true

# App configuration
REACT_APP_APP_NAME=BTG Pactual - Fondos de Pensi√≥n
REACT_APP_COMPANY_NAME=BTG Pactual
REACT_APP_SUPPORT_EMAIL=ecamachoecamacho@gmail.com

# Theme configuration
REACT_APP_PRIMARY_COLOR=#1976d2
REACT_APP_SECONDARY_COLOR=#dc004e
"@
    
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Info "Archivo .env creado con configuraci√≥n para $Environment"
    
    Write-Success "Variables de entorno configuradas"

    # Step 4: Build Frontend Application
    if (-not $SkipBuild) {
        Write-Step "4/6" "Construyendo aplicaci√≥n frontend..."
        
        # Install dependencies
        Write-Info "Instalando dependencias de Node.js..."
        npm install
        if ($LASTEXITCODE -ne 0) { throw "Error instalando dependencias del frontend" }
        
        # Run build
        Write-Info "Ejecutando build de producci√≥n..."
        npm run build
        if ($LASTEXITCODE -ne 0) { throw "Error construyendo aplicaci√≥n frontend" }
        
        # Verify build directory
        if (-not (Test-Path "build")) { throw "Directorio build no fue creado" }
        
        # Get build size
        $buildSize = [math]::Round((Get-ChildItem "build" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
        Write-Info "Tama√±o del build: $buildSize MB"
        
        Write-Success "Aplicaci√≥n construida exitosamente"
    } else {
        Write-Info "Build omitido (--SkipBuild especificado)"
        if (-not (Test-Path "build")) { throw "Directorio build no existe y --SkipBuild fue especificado" }
    }

    # Step 5: Deploy to S3
    Write-Step "5/6" "Desplegando a S3..."
    
    # Sync build directory to S3
    Write-Info "Subiendo archivos a S3 bucket: $s3BucketName"
    
    aws s3 sync build/ "s3://$s3BucketName/" `
        --delete `
        --region $Region `
        --cache-control "public, max-age=31536000" `
        --exclude "*.html" `
        --exclude "service-worker.js" `
        --exclude "manifest.json"
    
    if ($LASTEXITCODE -ne 0) { throw "Error subiendo archivos est√°ticos a S3" }
    
    # Upload HTML files with no cache
    Write-Info "Subiendo archivos HTML con cache corto..."
    aws s3 sync build/ "s3://$s3BucketName/" `
        --delete `
        --region $Region `
        --cache-control "public, max-age=0, must-revalidate" `
        --include "*.html" `
        --include "service-worker.js" `
        --include "manifest.json"
    
    if ($LASTEXITCODE -ne 0) { throw "Error subiendo archivos HTML a S3" }
    
    # Set correct content types
    Write-Info "Configurando content types..."
    aws s3 cp "s3://$s3BucketName/" "s3://$s3BucketName/" `
        --recursive `
        --metadata-directive REPLACE `
        --content-type "text/html" `
        --include "*.html" `
        --region $Region > $null
    
    Write-Success "Archivos desplegados a S3"

    # Step 6: Invalidate CloudFront Cache
    if (-not $SkipCacheInvalidation -and $cloudFrontDomain) {
        Write-Step "6/6" "Invalidando cache de CloudFront..."
        
        # Extract CloudFront distribution ID from domain
        $distributionId = aws cloudformation describe-stacks `
            --stack-name $stackName `
            --region $Region `
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendDistribution`].OutputValue' `
            --output text 2>$null
        
        if (-not $distributionId -or $distributionId -eq "None") {
            # Try to get distribution ID by domain
            $distributions = aws cloudfront list-distributions --query 'DistributionList.Items[*].[Id,DomainName]' --output json | ConvertFrom-Json
            $distributionId = ($distributions | Where-Object { $_[1] -eq $cloudFrontDomain.Replace("https://", "") })[0]
        }
        
        if ($distributionId -and $distributionId -ne "None") {
            Write-Info "Invalidando distribuci√≥n CloudFront: $distributionId"
            
            $invalidationResult = aws cloudfront create-invalidation `
                --distribution-id $distributionId `
                --paths "/*" `
                --output json 2>$null
            
            if ($LASTEXITCODE -eq 0) {
                $invalidation = $invalidationResult | ConvertFrom-Json
                Write-Info "Invalidaci√≥n creada: $($invalidation.Invalidation.Id)"
                Write-Success "Cache de CloudFront invalidado"
            } else {
                Write-Warning "Error invalidando cache de CloudFront"
            }
        } else {
            Write-Warning "No se pudo obtener el ID de distribuci√≥n de CloudFront"
        }
    } else {
        Write-Info "Invalidaci√≥n de cache omitida"
    }

    # Cleanup
    Set-Location "../infrastructure"
    
    # Test deployment
    Write-Info "Probando despliegue..."
    
    $s3Url = "http://$s3BucketName.s3-website-$Region.amazonaws.com"
    
    try {
        $testResponse = Invoke-WebRequest -Uri $s3Url -Method HEAD -TimeoutSec 10 -ErrorAction SilentlyContinue
        if ($testResponse.StatusCode -eq 200) {
            Write-Success "Despliegue accesible v√≠a S3"
        }
    } catch {
        Write-Warning "No se pudo verificar acceso directo a S3"
    }

    # Final Summary
    Write-Host ""
    Write-Host "üéâ ¬°DESPLIEGUE DEL FRONTEND COMPLETADO!" -ForegroundColor Green
    Write-Host "=======================================" -ForegroundColor Green
    Write-Host "S3 Bucket: $s3BucketName" -ForegroundColor White
    Write-Host "Regi√≥n: $Region" -ForegroundColor White
    Write-Host "Environment: $Environment" -ForegroundColor White
    Write-Host ""
    Write-Host "üåê URLs disponibles:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ S3 Website: $s3Url" -ForegroundColor White
    
    if ($cloudFrontDomain) {
        Write-Host "  ‚Ä¢ CloudFront: $cloudFrontDomain" -ForegroundColor White
        Write-Host ""
        Write-Host "üí° Recomendaci√≥n: Use la URL de CloudFront para mejor rendimiento" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "üîß Configuraci√≥n del frontend:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ API Backend: $apiGatewayUrl" -ForegroundColor White
    Write-Host "  ‚Ä¢ Environment: $Environment" -ForegroundColor White
    Write-Host "  ‚Ä¢ Notificaciones habilitadas: ‚úÖ" -ForegroundColor White
    Write-Host "  ‚Ä¢ Email habilitado: ‚úÖ" -ForegroundColor White
    Write-Host "  ‚Ä¢ SMS habilitado: ‚ùå" -ForegroundColor White
    
    Write-Host ""
    Write-Host "‚úÖ El frontend est√° listo y conectado al backend" -ForegroundColor Green

} catch {
    Write-Error "Error durante el despliegue: $($_.Exception.Message)"
    
    # Cleanup on error
    Set-Location $PSScriptRoot
    
    exit 1
}

Write-Host ""
Write-Host "üöÄ Despliegue completado exitosamente" -ForegroundColor Green
