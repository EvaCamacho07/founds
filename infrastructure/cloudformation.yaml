AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Infrastructure for BTG Pactual Pension Fund Management System - Frontend & Backend Deployment'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name for resource naming'
  
  TablePrefix:
    Type: String
    Default: 'btg-pension'
    Description: 'Prefix for DynamoDB table names (matches DYNAMODB_TABLE_PREFIX in .env)'

  # SendGrid Configuration
  SendGridApiKey:
    Type: String
    NoEcho: true
    Description: 'SendGrid API Key for email notifications'
    Default: 'REPLACE_WITH_YOUR_SENDGRID_API_KEY'

  FromEmail:
    Type: String
    Description: 'Email address for sending notifications'
    Default: 'ecamachoecamacho@gmail.com'

  # Twilio Configuration (Optional)
  TwilioAccountSid:
    Type: String
    Description: 'Twilio Account SID for SMS notifications'
    Default: 'REPLACE_WITH_YOUR_TWILIO_SID'

  TwilioAuthToken:
    Type: String
    NoEcho: true
    Description: 'Twilio Auth Token for SMS notifications'
    Default: 'REPLACE_WITH_YOUR_TWILIO_TOKEN'

  TwilioFromNumber:
    Type: String
    Description: 'Twilio phone number for sending SMS'
    Default: '+573001661010'

Resources:
  # S3 Bucket for Lambda Code
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${TablePrefix}-lambda-code-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'

  # S3 Bucket for Frontend Hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${TablePrefix}-frontend-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'

  # CloudFront Origin Access Identity
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${TablePrefix}-frontend-${Environment}'

  # S3 Bucket Policy for Frontend
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FrontendBucket}/*'

  # CloudFront Distribution for Frontend
  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: !Sub '${TablePrefix}-frontend-origin'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: !Sub '${TablePrefix}-frontend-origin'
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'

  # DynamoDB Table: Users
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TablePrefix}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'
        - Key: TableType
          Value: 'users'

  # DynamoDB Table: Subscriptions
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TablePrefix}-subscriptions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: subscriptionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: subscriptionDate
          AttributeType: S
      KeySchema:
        - AttributeName: subscriptionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserSubscriptionsIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: subscriptionDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'
        - Key: TableType
          Value: 'subscriptions'

  # DynamoDB Table: Notifications
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TablePrefix}-notifications'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: notificationId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: notificationId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserNotificationsIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'
        - Key: TableType
          Value: 'notifications'

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${TablePrefix}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt SubscriptionsTable.Arn
                  - !GetAtt NotificationsTable.Arn
                  - !Sub '${UsersTable.Arn}/index/*'
                  - !Sub '${SubscriptionsTable.Arn}/index/*'
                  - !Sub '${NotificationsTable.Arn}/index/*'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${TablePrefix}-api-${Environment}'
      Description: 'API Gateway for BTG Pension Fund Management System'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for Proxy
  ApiGatewayResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method for Proxy
  ApiGatewayMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResourceProxy
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations'

  # Lambda Function for Backend
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${TablePrefix}-backend-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const serverlessExpress = require('aws-serverless-express');
          
          // This is a placeholder. The actual code will be deployed via the deployment script
          exports.handler = async (event, context) => {
            return {
              statusCode: 200,
              headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,PUT,DELETE',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                message: 'BTG Pension Fund API is initializing...',
                status: 'placeholder',
                timestamp: new Date().toISOString(),
                event: event
              })
            };
          };
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          DYNAMODB_TABLE_PREFIX: !Ref TablePrefix
          REGION: !Ref AWS::Region
          MAIL_MAILER: 'smtp'
          MAIL_HOST: 'smtp.sendgrid.net'
          MAIL_PORT: '587'
          MAIL_USERNAME: 'apikey'
          MAIL_PASSWORD: !Ref SendGridApiKey
          MAIL_ENCRYPTION: 'tls'
          MAIL_FROM_NAME: 'BTG Pactual'
          MAIL_FROM_ADDRESS: !Ref FromEmail
          SMS_ACCOUNT_SID: !Ref TwilioAccountSid
          SMS_AUTH_TOKEN: !Ref TwilioAuthToken
          SMS_FROM_NUMBER: !Ref TwilioFromNumber
          TWILIO_ENABLED: 'false'
          APP_NAME: 'BTG Pactual - Fondos de Pensión'
      Timeout: 30
      MemorySize: 512
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'btg-pension-funds'

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackendLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodAny
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${BackendLambda}'
      RetentionInDays: 14

Outputs:
  # Frontend Outputs
  FrontendBucketName:
    Description: 'S3 Bucket name for frontend hosting'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${TablePrefix}-frontend-bucket-${Environment}'

  FrontendURL:
    Description: 'CloudFront URL for the frontend application'
    Value: !Sub 'https://${FrontendDistribution.DomainName}'
    Export:
      Name: !Sub '${TablePrefix}-frontend-url-${Environment}'

  FrontendS3URL:
    Description: 'S3 Website URL for the frontend (direct access)'
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub '${TablePrefix}-frontend-s3-url-${Environment}'

  # Backend Outputs
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL for backend'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${TablePrefix}-api-url-${Environment}'

  LambdaFunctionName:
    Description: 'Lambda Function Name for backend'
    Value: !Ref BackendLambda
    Export:
      Name: !Sub '${TablePrefix}-lambda-name-${Environment}'

  LambdaCodeBucketName:
    Description: 'S3 Bucket for Lambda deployment packages'
    Value: !Ref LambdaCodeBucket
    Export:
      Name: !Sub '${TablePrefix}-lambda-bucket-${Environment}'

  # Database Outputs
  UsersTableName:
    Description: 'DynamoDB Users table name'
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${TablePrefix}-users-table-${Environment}'

  SubscriptionsTableName:
    Description: 'DynamoDB Subscriptions table name'
    Value: !Ref SubscriptionsTable
    Export:
      Name: !Sub '${TablePrefix}-subscriptions-table-${Environment}'

  NotificationsTableName:
    Description: 'DynamoDB Notifications table name'
    Value: !Ref NotificationsTable
    Export:
      Name: !Sub '${TablePrefix}-notifications-table-${Environment}'

  # Configuration Outputs
  Region:
    Description: 'AWS Region where resources are deployed'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${TablePrefix}-region-${Environment}'

  TablePrefix:
    Description: 'Table prefix used for DynamoDB tables'
    Value: !Ref TablePrefix
    Export:
      Name: !Sub '${TablePrefix}-table-prefix-${Environment}'

  # Deployment Commands
  DeploymentCommands:
    Description: 'Commands to deploy backend and frontend code'
    Value: !Sub |
      # Deploy Backend:
      cd infrastructure && .\deploy-backend.ps1 -Environment ${Environment} -Region ${AWS::Region}
      
      # Deploy Frontend:
      cd infrastructure && .\deploy-frontend.ps1 -Environment ${Environment} -Region ${AWS::Region}
